{"ast":null,"code":"import _slicedToArray from \"D:/Desktop_02_07_2024/QR_Code_Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { millisecondsInDay } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  var _sort = [+toDate(intervalLeft.start), +toDate(intervalLeft.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort2 = _slicedToArray(_sort, 2),\n    leftStart = _sort2[0],\n    leftEnd = _sort2[1];\n  var _sort3 = [+toDate(intervalRight.start), +toDate(intervalRight.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort4 = _slicedToArray(_sort3, 2),\n    rightStart = _sort4[0],\n    rightEnd = _sort4[1];\n\n  // Prevent NaN result if intervals don't overlap at all.\n  var isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0;\n\n  // Remove the timezone offset to negate the DST effect on calculations.\n  var overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  var left = overlapLeft - getTimezoneOffsetInMilliseconds(overlapLeft);\n  var overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  var right = overlapRight - getTimezoneOffsetInMilliseconds(overlapRight);\n\n  // Ceil the number to include partial days too.\n  return Math.ceil((right - left) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default getOverlappingDaysInIntervals;","map":{"version":3,"names":["getTimezoneOffsetInMilliseconds","millisecondsInDay","toDate","getOverlappingDaysInIntervals","intervalLeft","intervalRight","_sort","start","end","sort","a","b","_sort2","_slicedToArray","leftStart","leftEnd","_sort3","_sort4","rightStart","rightEnd","isOverlapping","overlapLeft","left","overlapRight","right","Math","ceil"],"sources":["D:/Desktop_02_07_2024/QR_Code_Front/node_modules/date-fns/getOverlappingDaysInIntervals.mjs"],"sourcesContent":["import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { millisecondsInDay } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStart, leftEnd] = [\n    +toDate(intervalLeft.start),\n    +toDate(intervalLeft.end),\n  ].sort((a, b) => a - b);\n  const [rightStart, rightEnd] = [\n    +toDate(intervalRight.start),\n    +toDate(intervalRight.end),\n  ].sort((a, b) => a - b);\n\n  // Prevent NaN result if intervals don't overlap at all.\n  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0;\n\n  // Remove the timezone offset to negate the DST effect on calculations.\n  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  const left = overlapLeft - getTimezoneOffsetInMilliseconds(overlapLeft);\n  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  const right = overlapRight - getTimezoneOffsetInMilliseconds(overlapRight);\n\n  // Ceil the number to include partial days too.\n  return Math.ceil((right - left) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default getOverlappingDaysInIntervals;\n"],"mappings":";AAAA,SAASA,+BAA+B,QAAQ,4CAA4C;AAC5F,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,6BAA6BA,CAACC,YAAY,EAAEC,aAAa,EAAE;EACzE,IAAAC,KAAA,GAA6B,CAC3B,CAACJ,MAAM,CAACE,YAAY,CAACG,KAAK,CAAC,EAC3B,CAACL,MAAM,CAACE,YAAY,CAACI,GAAG,CAAC,CAC1B,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAAC,MAAA,GAAAC,cAAA,CAAAP,KAAA;IAHhBQ,SAAS,GAAAF,MAAA;IAAEG,OAAO,GAAAH,MAAA;EAIzB,IAAAI,MAAA,GAA+B,CAC7B,CAACd,MAAM,CAACG,aAAa,CAACE,KAAK,CAAC,EAC5B,CAACL,MAAM,CAACG,aAAa,CAACG,GAAG,CAAC,CAC3B,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAAM,MAAA,GAAAJ,cAAA,CAAAG,MAAA;IAHhBE,UAAU,GAAAD,MAAA;IAAEE,QAAQ,GAAAF,MAAA;;EAK3B;EACA,IAAMG,aAAa,GAAGN,SAAS,GAAGK,QAAQ,IAAID,UAAU,GAAGH,OAAO;EAClE,IAAI,CAACK,aAAa,EAAE,OAAO,CAAC;;EAE5B;EACA,IAAMC,WAAW,GAAGH,UAAU,GAAGJ,SAAS,GAAGA,SAAS,GAAGI,UAAU;EACnE,IAAMI,IAAI,GAAGD,WAAW,GAAGrB,+BAA+B,CAACqB,WAAW,CAAC;EACvE,IAAME,YAAY,GAAGJ,QAAQ,GAAGJ,OAAO,GAAGA,OAAO,GAAGI,QAAQ;EAC5D,IAAMK,KAAK,GAAGD,YAAY,GAAGvB,+BAA+B,CAACuB,YAAY,CAAC;;EAE1E;EACA,OAAOE,IAAI,CAACC,IAAI,CAAC,CAACF,KAAK,GAAGF,IAAI,IAAIrB,iBAAiB,CAAC;AACtD;;AAEA;AACA,eAAeE,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module"}