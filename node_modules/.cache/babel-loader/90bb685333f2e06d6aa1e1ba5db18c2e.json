{"ast":null,"code":"var _slicedToArray = require(\"D:/Desktop_02_07_2024/QR_Code_Front/node_modules/@babel/runtime/helpers/slicedToArray.js\")[\"default\"];\nvar _require = require('./constants'),\n  MAX_SAFE_COMPONENT_LENGTH = _require.MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH = _require.MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH = _require.MAX_LENGTH;\nvar debug = require('./debug');\nexports = module.exports = {};\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar safeRe = exports.safeRe = [];\nvar src = exports.src = [];\nvar t = exports.t = {};\nvar R = 0;\nvar LETTERDASHNUMBER = '[a-zA-Z0-9-]';\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nvar safeRegexReplacements = [['\\\\s', 1], ['\\\\d', MAX_LENGTH], [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]];\nvar makeSafeRegex = function makeSafeRegex(value) {\n  for (var _i = 0, _safeRegexReplacement = safeRegexReplacements; _i < _safeRegexReplacement.length; _i++) {\n    var _safeRegexReplacement2 = _slicedToArray(_safeRegexReplacement[_i], 2),\n      token = _safeRegexReplacement2[0],\n      max = _safeRegexReplacement2[1];\n    value = value.split(\"\".concat(token, \"*\")).join(\"\".concat(token, \"{0,\").concat(max, \"}\")).split(\"\".concat(token, \"+\")).join(\"\".concat(token, \"{1,\").concat(max, \"}\"));\n  }\n  return value;\n};\nvar createToken = function createToken(name, value, isGlobal) {\n  var safe = makeSafeRegex(value);\n  var index = R++;\n  debug(name, index, value);\n  t[name] = index;\n  src[index] = value;\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);\n};\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+');\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', \"\\\\d*[a-zA-Z-]\".concat(LETTERDASHNUMBER, \"*\"));\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', \"(\".concat(src[t.NUMERICIDENTIFIER], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIER], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIER], \")\"));\ncreateToken('MAINVERSIONLOOSE', \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\"));\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', \"(?:\".concat(src[t.NUMERICIDENTIFIER], \"|\").concat(src[t.NONNUMERICIDENTIFIER], \")\"));\ncreateToken('PRERELEASEIDENTIFIERLOOSE', \"(?:\".concat(src[t.NUMERICIDENTIFIERLOOSE], \"|\").concat(src[t.NONNUMERICIDENTIFIER], \")\"));\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', \"(?:-(\".concat(src[t.PRERELEASEIDENTIFIER], \"(?:\\\\.\").concat(src[t.PRERELEASEIDENTIFIER], \")*))\"));\ncreateToken('PRERELEASELOOSE', \"(?:-?(\".concat(src[t.PRERELEASEIDENTIFIERLOOSE], \"(?:\\\\.\").concat(src[t.PRERELEASEIDENTIFIERLOOSE], \")*))\"));\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', \"\".concat(LETTERDASHNUMBER, \"+\"));\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', \"(?:\\\\+(\".concat(src[t.BUILDIDENTIFIER], \"(?:\\\\.\").concat(src[t.BUILDIDENTIFIER], \")*))\"));\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', \"v?\".concat(src[t.MAINVERSION]).concat(src[t.PRERELEASE], \"?\").concat(src[t.BUILD], \"?\"));\ncreateToken('FULL', \"^\".concat(src[t.FULLPLAIN], \"$\"));\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', \"[v=\\\\s]*\".concat(src[t.MAINVERSIONLOOSE]).concat(src[t.PRERELEASELOOSE], \"?\").concat(src[t.BUILD], \"?\"));\ncreateToken('LOOSE', \"^\".concat(src[t.LOOSEPLAIN], \"$\"));\ncreateToken('GTLT', '((?:<|>)?=?)');\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', \"\".concat(src[t.NUMERICIDENTIFIERLOOSE], \"|x|X|\\\\*\"));\ncreateToken('XRANGEIDENTIFIER', \"\".concat(src[t.NUMERICIDENTIFIER], \"|x|X|\\\\*\"));\ncreateToken('XRANGEPLAIN', \"[v=\\\\s]*(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\".concat(src[t.PRERELEASE], \")?\").concat(src[t.BUILD], \"?\") + \")?)?\");\ncreateToken('XRANGEPLAINLOOSE', \"[v=\\\\s]*(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\".concat(src[t.PRERELEASELOOSE], \")?\").concat(src[t.BUILD], \"?\") + \")?)?\");\ncreateToken('XRANGE', \"^\".concat(src[t.GTLT], \"\\\\s*\").concat(src[t.XRANGEPLAIN], \"$\"));\ncreateToken('XRANGELOOSE', \"^\".concat(src[t.GTLT], \"\\\\s*\").concat(src[t.XRANGEPLAINLOOSE], \"$\"));\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCEPLAIN', \"\".concat('(^|[^\\\\d])' + '(\\\\d{1,').concat(MAX_SAFE_COMPONENT_LENGTH, \"})\") + \"(?:\\\\.(\\\\d{1,\".concat(MAX_SAFE_COMPONENT_LENGTH, \"}))?\") + \"(?:\\\\.(\\\\d{1,\".concat(MAX_SAFE_COMPONENT_LENGTH, \"}))?\"));\ncreateToken('COERCE', \"\".concat(src[t.COERCEPLAIN], \"(?:$|[^\\\\d])\"));\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] + \"(?:\".concat(src[t.PRERELEASE], \")?\") + \"(?:\".concat(src[t.BUILD], \")?\") + \"(?:$|[^\\\\d])\");\ncreateToken('COERCERTL', src[t.COERCE], true);\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true);\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)');\ncreateToken('TILDETRIM', \"(\\\\s*)\".concat(src[t.LONETILDE], \"\\\\s+\"), true);\nexports.tildeTrimReplace = '$1~';\ncreateToken('TILDE', \"^\".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAIN], \"$\"));\ncreateToken('TILDELOOSE', \"^\".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAINLOOSE], \"$\"));\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)');\ncreateToken('CARETTRIM', \"(\\\\s*)\".concat(src[t.LONECARET], \"\\\\s+\"), true);\nexports.caretTrimReplace = '$1^';\ncreateToken('CARET', \"^\".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAIN], \"$\"));\ncreateToken('CARETLOOSE', \"^\".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAINLOOSE], \"$\"));\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', \"^\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.LOOSEPLAIN], \")$|^$\"));\ncreateToken('COMPARATOR', \"^\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.FULLPLAIN], \")$|^$\"));\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', \"(\\\\s*)\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.LOOSEPLAIN], \"|\").concat(src[t.XRANGEPLAIN], \")\"), true);\nexports.comparatorTrimReplace = '$1$2$3';\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', \"^\\\\s*(\".concat(src[t.XRANGEPLAIN], \")\") + \"\\\\s+-\\\\s+\" + \"(\".concat(src[t.XRANGEPLAIN], \")\") + \"\\\\s*$\");\ncreateToken('HYPHENRANGELOOSE', \"^\\\\s*(\".concat(src[t.XRANGEPLAINLOOSE], \")\") + \"\\\\s+-\\\\s+\" + \"(\".concat(src[t.XRANGEPLAINLOOSE], \")\") + \"\\\\s*$\");\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*');\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$');\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$');","map":{"version":3,"names":["_require","require","MAX_SAFE_COMPONENT_LENGTH","MAX_SAFE_BUILD_LENGTH","MAX_LENGTH","debug","exports","module","re","safeRe","src","t","R","LETTERDASHNUMBER","safeRegexReplacements","makeSafeRegex","value","_i","_safeRegexReplacement","length","_safeRegexReplacement2","_slicedToArray","token","max","split","concat","join","createToken","name","isGlobal","safe","index","RegExp","undefined","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCEPLAIN","COERCE","COERCEFULL","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace"],"sources":["D:/Desktop_02_07_2024/QR_Code_Front/node_modules/jsonwebtoken/node_modules/semver/internal/re.js"],"sourcesContent":["const {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH,\n} = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst safeRe = exports.safeRe = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nconst makeSafeRegex = (value) => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value\n      .split(`${token}*`).join(`${token}{0,${max}}`)\n      .split(`${token}+`).join(`${token}{1,${max}}`)\n  }\n  return value\n}\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value)\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)\ncreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`)\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] +\n              `(?:${src[t.PRERELEASE]})?` +\n              `(?:${src[t.BUILD]})?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}